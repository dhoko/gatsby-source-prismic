{
  "version": 3,
  "sources": ["../src/index.ts", "../src/types.ts", "../src/constants.ts"],
  "sourcesContent": ["/**\n * Exports in this file are provided only for use in Gatsby plugins related to\n * `gatsby-source-prismic`.\n *\n * These exports are intended only for internal use and should be considered\n * unstable.\n */\n\nexport * from './types'\nexport * from './constants'\n", "import * as gatsby from 'gatsby'\nimport * as gatsbyFs from 'gatsby-source-filesystem'\nimport * as imgixGatsby from '@imgix/gatsby'\nimport * as prismic from '@prismicio/client'\nimport * as prismicH from '@prismicio/helpers'\nimport * as prismicT from '@prismicio/types'\nimport * as gqlc from 'graphql-compose'\nimport * as RTE from 'fp-ts/ReaderTaskEither'\nimport { NodeHelpers } from 'gatsby-node-helpers'\nimport { Agent } from 'http'\n\nexport type Mutable<T> = {\n  -readonly [P in keyof T]: T[P]\n}\n\nexport type UnknownRecord<K extends PropertyKey = PropertyKey> = Record<\n  K,\n  unknown\n>\n\nexport type IterableElement<TargetIterable> = TargetIterable extends Iterable<\n  infer ElementType\n>\n  ? ElementType\n  : never\n\nexport type JoiValidationError = InstanceType<\n  gatsby.PluginOptionsSchemaArgs['Joi']['ValidationError']\n>\n\nexport interface HttpOptions {\n  agent: {\n    http: Agent\n    https: Agent\n   }\n}\n\nexport interface TypePath {\n  path: string[]\n  type: PrismicTypePathType\n}\n\nexport type TypePathNode = TypePath & gatsby.Node\n\nexport interface Dependencies {\n  prismicClient: prismic.Client\n  createTypes: gatsby.Actions['createTypes']\n  createNode: gatsby.Actions['createNode']\n  buildObjectType: gatsby.NodePluginSchema['buildObjectType']\n  buildUnionType: gatsby.NodePluginSchema['buildUnionType']\n  buildEnumType: gatsby.NodePluginSchema['buildEnumType']\n  buildInterfaceType: gatsby.NodePluginSchema['buildInterfaceType']\n  getNode: gatsby.SourceNodesArgs['getNode']\n  getNodes: gatsby.SourceNodesArgs['getNodes']\n  touchNode: gatsby.Actions['touchNode']\n  deleteNode: gatsby.Actions['deleteNode']\n  createNodeId: gatsby.NodePluginArgs['createNodeId']\n  createContentDigest: gatsby.NodePluginArgs['createContentDigest']\n  schema: gatsby.NodePluginSchema\n  cache: gatsby.GatsbyCache\n  store: gatsby.Store\n  reporter: gatsby.Reporter\n  reportInfo: gatsby.Reporter['info']\n  reportWarning: gatsby.Reporter['warn']\n  globalNodeHelpers: NodeHelpers\n  nodeHelpers: NodeHelpers\n  pluginOptions: PluginOptions\n  webhookBody?: unknown\n  httpOptions?: HttpOptions\n  createRemoteFileNode: typeof gatsbyFs.createRemoteFileNode\n}\n\nexport interface PluginOptions extends gatsby.PluginOptions {\n  repositoryName: string\n  accessToken?: string\n  apiEndpoint: string\n  customTypesApiToken?: string\n  customTypesApiEndpoint?: string\n  releaseID?: string\n  graphQuery?: string\n  fetchLinks?: string[]\n  lang: string\n  linkResolver?: prismicH.LinkResolverFunction\n  htmlSerializer?: prismicH.HTMLFunctionSerializer | prismicH.HTMLMapSerializer\n  schemas: Record<string, prismicT.CustomTypeModel>\n  imageImgixParams: imgixGatsby.ImgixUrlParams\n  imagePlaceholderImgixParams: imgixGatsby.ImgixUrlParams\n  typePrefix?: string\n  webhookSecret?: string\n  plugins: []\n  createRemoteFileNode: typeof gatsbyFs.createRemoteFileNode\n  transformFieldName: (fieldName: string) => string\n}\n\nexport type FieldConfigCreator<\n  TSchema extends prismicT.CustomTypeModelField = prismicT.CustomTypeModelField,\n> = (\n  path: string[],\n  schema: TSchema,\n) => RTE.ReaderTaskEither<\n  Dependencies,\n  never,\n  gqlc.ObjectTypeComposerFieldConfigDefinition<unknown, unknown>\n>\n\nexport type PrismicTypePathType =\n  | PrismicSpecialType\n  | prismicT.CustomTypeModelFieldType\n  | prismicT.CustomTypeModelSliceType\n\nexport enum PrismicSpecialType {\n  Document = 'Document',\n  DocumentData = 'DocumentData',\n  Unknown = 'Unknown',\n}\n\nexport interface PrismicAPIDocumentNode\n  extends prismicT.PrismicDocument,\n    gatsby.Node {\n  prismicId: string\n}\n\nexport type PrismicWebhookBody =\n  | PrismicWebhookBodyApiUpdate\n  | PrismicWebhookBodyTestTrigger\n\nexport enum PrismicWebhookType {\n  APIUpdate = 'api-update',\n  TestTrigger = 'test-trigger',\n}\n\ninterface PrismicWebhookBodyBase {\n  type: PrismicWebhookType\n  domain: string\n  apiUrl: string\n  secret: string | null\n}\n\nexport interface PrismicWebhookBodyApiUpdate extends PrismicWebhookBodyBase {\n  type: PrismicWebhookType.APIUpdate\n  masterRef?: string\n  releases: PrismicWebhookOperations<PrismicWebhookRelease>\n  masks: PrismicWebhookOperations<PrismicWebhookMask>\n  tags: PrismicWebhookOperations<PrismicWebhookTag>\n  documents: string[]\n  // eslint-disable-next-line deprecation/deprecation\n  experiments?: PrismicWebhookOperations<PrismicWebhookExperiment>\n}\n\nexport interface PrismicWebhookBodyTestTrigger extends PrismicWebhookBodyBase {\n  type: PrismicWebhookType.TestTrigger\n}\n\ninterface PrismicWebhookOperations<T> {\n  update?: T[]\n  addition?: T[]\n  deletion?: T[]\n}\n\ninterface PrismicWebhookMask {\n  id: string\n  label: string\n}\n\ninterface PrismicWebhookTag {\n  id: string\n}\n\nexport interface PrismicWebhookRelease {\n  id: string\n  ref: string\n  label: string\n  documents: string[]\n}\n\n/**\n * @deprecated\n */\ninterface PrismicWebhookExperiment {\n  id: string\n  name: string\n  // eslint-disable-next-line deprecation/deprecation\n  variations: PrismicWebhookExperimentVariation[]\n}\n\n/**\n * @deprecated\n */\ninterface PrismicWebhookExperimentVariation {\n  id: string\n  ref: string\n  label: string\n}\n\nexport type PrismicCustomTypeApiResponse = PrismicCustomTypeApiCustomType[]\n\nexport interface PrismicCustomTypeApiCustomType<\n  Model extends prismicT.CustomTypeModel = prismicT.CustomTypeModel,\n> {\n  id: string\n  label: string\n  repeatable: boolean\n  json: Model\n}\n", "/**\n * Global prefix used for all GraphQL types and, where necessary, fields.\n */\nexport const GLOBAL_TYPE_PREFIX = 'Prismic'\n\n/**\n * Custom type fields that are included alongside other fields in the JSON\n * schema, but are not included in the API response for a document's `data`\n * field.\n *\n * Fields in this list are moved from the `data` GraphQL field to the root.\n */\nexport const PRISMIC_API_NON_DATA_FIELDS = ['uid']\n\n/**\n * Default endpoint used to fetch custom type JSON schemas from Prismic's\n * Custom Type API.\n *\n * @see https://prismic.io/docs/technologies/custom-types-api\n */\nexport const DEFAULT_CUSTOM_TYPES_API_ENDPOINT =\n  'https://customtypes.prismic.io/customtypes'\n\n/**\n * Default Imgix URL parameters for `gatsby-plugin-image` fields.\n *\n * These defaults provide a good balance between image quality and filesize.\n *\n * @see https://docs.imgix.com/apis/rendering\n */\nexport const DEFAULT_IMGIX_PARAMS = {\n  auto: 'compress,format',\n\n  // The following values are not included by Prismic's URLs by default.\n  fit: 'max',\n  q: 50,\n} as const\n\n/**\n * Default Imgix URL parameters for `gatsby-plugin-image` placeholder images.\n *\n * These defaults provide a good balance between image quality and filesize.\n * They are merged with the `imageImgixParams` plugin option.\n *\n * @see https://docs.imgix.com/apis/rendering\n */\nexport const DEFAULT_PLACEHOLDER_IMGIX_PARAMS = {\n  w: 100,\n\n  // Makes the image appear less pixelated when stretched to large sizes.\n  //\n  // TODO: This value can be removed if `gatsby-plugin-image` implements\n  // CSS-based blurring.\n  blur: 15,\n} as const\n\n/**\n * Default Prismic language option used when fetching documents. The current\n * default fetches all languages.\n *\n * @see https://prismic.io/docs/technologies/query-by-language-rest-api\n */\nexport const DEFAULT_LANG = '*'\n\n/**\n * Format used for all plugin reporting. Includes the plugin's name and the\n * instance's repository name (helpful when multiple repositories are\n * configured).\n */\nexport const REPORTER_TEMPLATE = `gatsby-source-prismic(%s) - %s`\n\n/**\n * Root node field used to compare static data with preview data. If values are\n * equal, the preview node can be treated as an updated version of the static\n * node.\n *\n * This is an internal-use-only field used by `gatsby-plugin-prismic-previews`.\n */\nexport const PREVIEWABLE_NODE_ID_FIELD = '_previewable'\n\n/**\n * Message displayed to the user when a webhook's secret does not match the\n * secret configured in the site's `gatsby-config.js`.\n */\nexport const WEBHOOK_SECRET_MISMATCH_MSG =\n  'A webhook was received, but the webhook secret did not match the webhook secret provided in the plugin options. If this is unexpected, verify that the `webhookSecret` plugin option matches the webhook secret in your Prismic repository.'\n\n/**\n * Message displayed to the user when a `test-trigger` webhook is received.\n */\nexport const WEBHOOK_TEST_TRIGGER_SUCCESS_MSG =\n  'Success! Received a test trigger webhook. When changes to your content are saved, Gatsby will automatically fetch the changes.'\n\n/**\n * Message displayed to the user when a missing custom type schema is detected.\n */\nexport const MISSING_SCHEMAS_MSG =\n  'JSON schemas for all custom types are required'\n\n/**\n * Format used to inform the user of a missing schema.\n */\nexport const MISSING_SCHEMA_MSG = 'JSON schema for \"%s\" is missing'\n"],
  "mappings": ";;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AC8GO,IAAK;AAAL,UAAK,qBAAL;AACL,oCAAW;AACX,wCAAe;AACf,mCAAU;AAAA,GAHA;AAgBL,IAAK;AAAL,UAAK,qBAAL;AACL,qCAAY;AACZ,uCAAc;AAAA,GAFJ;;;AC3HL,IAAM,qBAAqB;AAS3B,IAAM,8BAA8B,CAAC;AAQrC,IAAM,oCACX;AASK,IAAM,uBAAuB;AAAA,EAClC,MAAM;AAAA,EAGN,KAAK;AAAA,EACL,GAAG;AAAA;AAWE,IAAM,mCAAmC;AAAA,EAC9C,GAAG;AAAA,EAMH,MAAM;AAAA;AASD,IAAM,eAAe;AAOrB,IAAM,oBAAoB;AAS1B,IAAM,4BAA4B;AAMlC,IAAM,8BACX;AAKK,IAAM,mCACX;AAKK,IAAM,sBACX;AAKK,IAAM,qBAAqB;",
  "names": []
}
